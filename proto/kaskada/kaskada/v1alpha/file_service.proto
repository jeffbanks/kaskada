syntax = "proto3";
package kaskada.kaskada.v1alpha;

import "kaskada/kaskada/v1alpha/common.proto";
import "kaskada/kaskada/v1alpha/kafka.proto";
import "kaskada/kaskada/v1alpha/pulsar.proto";
import "kaskada/kaskada/v1alpha/schema.proto";

message SourceMetadata {
  // The schema of the source.
  Schema schema = 1;
}

message GetMetadataRequest {
  oneof source {
    SourceData source_data = 1;
    PulsarSubscription pulsar_subscription = 2;
    KafkaSubscription kafka_subscription = 3;
  }
}

message GetMetadataResponse {
  // The metadata for the source.
  SourceMetadata source_metadata = 1;
}

message MergeMetadataRequest {
  TableMetadata table_metadata = 1;

  repeated SourceMetadata new_source_metadata = 2;
}

message MergeMetadataResponse {
  TableMetadata merged_table_metadata = 1;

  // The result of merging for each of the sources in the request.
  repeated SourceMergeResult new_source_results = 2;

  message SourceMergeResult {
    // True if this source was successfully merged.
    bool compatible = 1;

    // TODO: For incompatible sources, add explanations?
  }
}

service FileService {
  // Fetches the metadata.
  rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse);

  // Incorporate additional files into the table schema.
  //
  // This is initially planned to perform a *widening* merge. Specifically, this
  // should be used when the table schema is "all (compatible) columns in any of
  // the files", with `null` values when the file doesn't contain that column.
  //
  // We may add a separate method for checking file schemas against a fixed
  // table schema, or make that a property of the merge request.
  rpc MergeMetadata(MergeMetadataRequest) returns (MergeMetadataResponse);
}
